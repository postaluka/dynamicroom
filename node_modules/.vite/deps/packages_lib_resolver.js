import {
  __commonJS,
  __require
} from "./chunk-6NOISVLF.js";

// node_modules/factories/lib/base.js
var require_base = __commonJS({
  "node_modules/factories/lib/base.js"(exports, module) {
    (function() {
      var BaseFactory;
      BaseFactory = function() {
        function BaseFactory2() {
        }
        BaseFactory2.prototype.create = function(data) {
        };
        BaseFactory2.prototype.test = function(data) {
        };
        return BaseFactory2;
      }();
      module.exports = BaseFactory;
    }).call(exports);
  }
});

// node_modules/factories/lib/class.js
var require_class = __commonJS({
  "node_modules/factories/lib/class.js"(exports, module) {
    (function() {
      var ClassFactory, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      ClassFactory = function(_super) {
        __extends(ClassFactory2, _super);
        function ClassFactory2(clazz) {
          this.clazz = clazz;
        }
        ClassFactory2.prototype.create = function(data) {
          return new this.clazz(data);
        };
        ClassFactory2.prototype.test = function(data) {
          return this.clazz.test(data);
        };
        return ClassFactory2;
      }(require_base());
      module.exports = function(clazz) {
        return new ClassFactory(clazz);
      };
    }).call(exports);
  }
});

// node_modules/type-component/index.js
var require_type_component = __commonJS({
  "node_modules/type-component/index.js"(exports, module) {
    var toString = Object.prototype.toString;
    module.exports = function(val) {
      switch (toString.call(val)) {
        case "[object Function]":
          return "function";
        case "[object Date]":
          return "date";
        case "[object RegExp]":
          return "regexp";
        case "[object Arguments]":
          return "arguments";
        case "[object Array]":
          return "array";
      }
      if (val === null)
        return "null";
      if (val === void 0)
        return "undefined";
      if (val === Object(val))
        return "object";
      return typeof val;
    };
  }
});

// node_modules/factories/lib/fn.js
var require_fn = __commonJS({
  "node_modules/factories/lib/fn.js"(exports, module) {
    (function() {
      var FnFactory;
      FnFactory = function() {
        function FnFactory2(fn) {
          this.fn = fn;
        }
        FnFactory2.prototype.test = function(data) {
          return this.fn.test(data);
        };
        FnFactory2.prototype.create = function(data) {
          return this.fn(data);
        };
        return FnFactory2;
      }();
      module.exports = function(fn) {
        return new FnFactory(fn);
      };
    }).call(exports);
  }
});

// node_modules/factories/lib/factory.js
var require_factory = __commonJS({
  "node_modules/factories/lib/factory.js"(exports, module) {
    (function() {
      var ClassFactory, FactoryFactory, FnFactory, factory, type, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      ClassFactory = require_class();
      type = require_type_component();
      FnFactory = require_fn();
      FactoryFactory = function(_super) {
        __extends(FactoryFactory2, _super);
        function FactoryFactory2() {
        }
        FactoryFactory2.prototype.create = function(data) {
          var t;
          if (data.create && data.test) {
            return data;
          } else if ((t = type(data)) === "function") {
            if (data.prototype.constructor) {
              return new ClassFactory(data);
            } else {
              return new FnFactory(data);
            }
          }
          return data;
        };
        return FactoryFactory2;
      }(require_base());
      factory = new FactoryFactory();
      module.exports = factory;
    }).call(exports);
  }
});

// node_modules/factories/lib/any.js
var require_any = __commonJS({
  "node_modules/factories/lib/any.js"(exports, module) {
    (function() {
      var AnyFactory, factoryFactory, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      factoryFactory = require_factory();
      AnyFactory = function(_super) {
        __extends(AnyFactory2, _super);
        function AnyFactory2(factories) {
          if (factories == null) {
            factories = [];
          }
          this.factories = factories.map(factoryFactory.create);
        }
        AnyFactory2.prototype.test = function(data) {
          return !!this._getFactory(data);
        };
        AnyFactory2.prototype.push = function(factory) {
          return this.factories.push(factoryFactory.create(factory));
        };
        AnyFactory2.prototype.create = function(data) {
          var _ref;
          return (_ref = this._getFactory(data)) != null ? _ref.create(data) : void 0;
        };
        AnyFactory2.prototype._getFactory = function(data) {
          var factory, _i, _len, _ref;
          _ref = this.factories;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            factory = _ref[_i];
            if (factory.test(data)) {
              return factory;
            }
          }
        };
        return AnyFactory2;
      }(require_base());
      module.exports = function(factories) {
        return new AnyFactory(factories);
      };
    }).call(exports);
  }
});

// node_modules/factories/lib/group.js
var require_group = __commonJS({
  "node_modules/factories/lib/group.js"(exports, module) {
    (function() {
      var GroupFactory, factoryFactory, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      factoryFactory = require_factory();
      GroupFactory = function(_super) {
        __extends(GroupFactory2, _super);
        function GroupFactory2(mandatory, optional, groupClass) {
          if (mandatory == null) {
            mandatory = [];
          }
          if (optional == null) {
            optional = [];
          }
          this.groupClass = groupClass;
          this.mandatory = mandatory.map(factoryFactory.create);
          this.optional = optional.map(factoryFactory.create);
        }
        GroupFactory2.prototype.test = function(data) {
          return !!this._getFactories(data, this.mandatory).length;
        };
        GroupFactory2.prototype.create = function(data) {
          var factory, items, _i, _j, _len, _len1, _ref, _ref1;
          items = [];
          _ref = this._getFactories(data, this.mandatory);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            factory = _ref[_i];
            items.push(factory.create(data));
          }
          _ref1 = this._getFactories(data, this.optional);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            factory = _ref1[_j];
            items.push(factory.create(data));
          }
          if (items.length === 1) {
            return items[0];
          }
          return new this.groupClass(data, items);
        };
        GroupFactory2.prototype._getFactories = function(data, collection) {
          var factories, factory, _i, _len;
          factories = [];
          for (_i = 0, _len = collection.length; _i < _len; _i++) {
            factory = collection[_i];
            if (factory.test(data)) {
              factories.push(factory);
            }
          }
          return factories;
        };
        return GroupFactory2;
      }(require_base());
      module.exports = function(mandatory, optional, groupClass) {
        return new GroupFactory(mandatory, optional, groupClass);
      };
    }).call(exports);
  }
});

// node_modules/factories/lib/index.js
var require_lib = __commonJS({
  "node_modules/factories/lib/index.js"(exports, module) {
    (function() {
      module.exports = {
        any: require_any(),
        "class": require_class(),
        factory: require_factory(),
        fn: require_fn(),
        group: require_group()
      };
    }).call(exports);
  }
});

// browser-external:events
var require_events = __commonJS({
  "browser-external:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "events" has been externalized for browser compatibility. Cannot access "events.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/packages/lib/resolver/base.js
var require_base2 = __commonJS({
  "node_modules/packages/lib/resolver/base.js"(exports, module) {
    (function() {
      var BaseResolver, events, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      events = require_events();
      BaseResolver = function(_super) {
        __extends(BaseResolver2, _super);
        function BaseResolver2() {
          BaseResolver2.__super__.constructor.call(this);
        }
        BaseResolver2.prototype.resolve = function() {
        };
        return BaseResolver2;
      }(events.EventEmitter);
      module.exports = BaseResolver;
    }).call(exports);
  }
});

// node_modules/packages/lib/resolver/module.js
var require_module = __commonJS({
  "node_modules/packages/lib/resolver/module.js"(exports, module) {
    (function() {
      var ModuleResolver, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      ModuleResolver = function(_super) {
        __extends(ModuleResolver2, _super);
        function ModuleResolver2(_name) {
          this._name = _name;
          ModuleResolver2.__super__.constructor.call(this);
        }
        ModuleResolver2.prototype.resolve = function() {
          return {
            name: this._name,
            plugin: function(_this) {
              return function() {
                return __require(_this._name);
              };
            }(this)
          };
        };
        ModuleResolver2.create = function(name) {
          return new ModuleResolver2(name);
        };
        ModuleResolver2.test = function(name) {
          var e;
          try {
            return __require.resolve(name);
          } catch (_error) {
            e = _error;
          }
        };
        return ModuleResolver2;
      }(require_base2());
      module.exports = ModuleResolver;
    }).call(exports);
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/packages/lib/resolver/directory.js
var require_directory = __commonJS({
  "node_modules/packages/lib/resolver/directory.js"(exports, module) {
    (function() {
      var DirectoryResolver, fs, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      fs = require_fs();
      DirectoryResolver = function(_super) {
        __extends(DirectoryResolver2, _super);
        function DirectoryResolver2(_dir) {
          this._dir = _dir;
        }
        DirectoryResolver2.prototype.resolve = function() {
          var file, fp, packages, pkg, _i, _len, _ref;
          packages = [];
          _ref = fs.readdirSync(this._dir);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file === ".DS_Store") {
              continue;
            }
            fp = this._dir + "/" + file;
            pkg = __require(fp);
            pkg.name = file;
            packages.push(pkg);
          }
          return packages;
        };
        DirectoryResolver2.test = function(name) {
          var e;
          try {
            return fs.statSync(name).isDirectory();
          } catch (_error) {
            e = _error;
            return void 0;
          }
        };
        return DirectoryResolver2;
      }(require_base2());
      module.exports = DirectoryResolver;
    }).call(exports);
  }
});

// node_modules/packages/lib/resolver/obj.js
var require_obj = __commonJS({
  "node_modules/packages/lib/resolver/obj.js"(exports, module) {
    (function() {
      var ObjResolver, type, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      type = require_type_component();
      ObjResolver = function(_super) {
        __extends(ObjResolver2, _super);
        function ObjResolver2(_target) {
          this._target = _target;
        }
        ObjResolver2.prototype.resolve = function() {
          var name, packages, _fn;
          if (this._target.load) {
            return this._target;
          }
          packages = [];
          _fn = function(_this) {
            return function(name2) {
              var tg;
              tg = _this._target[name2];
              return packages.push({
                name: name2,
                plugin: function() {
                  return tg;
                }
              });
            };
          }(this);
          for (name in this._target) {
            _fn(name);
          }
          return packages;
        };
        ObjResolver2.test = function(target) {
          return type(target) === "object";
        };
        return ObjResolver2;
      }(require_base2());
      module.exports = ObjResolver;
    }).call(exports);
  }
});

// node_modules/packages/lib/resolver/factory.js
var require_factory2 = __commonJS({
  "node_modules/packages/lib/resolver/factory.js"(exports, module) {
    (function() {
      var factories;
      factories = require_lib();
      module.exports = factories.any([require_module(), require_directory(), require_obj()]);
    }).call(exports);
  }
});

// node_modules/toarray/index.js
var require_toarray = __commonJS({
  "node_modules/toarray/index.js"(exports, module) {
    module.exports = function(item) {
      if (item === void 0)
        return [];
      return Object.prototype.toString.call(item) === "[object Array]" ? item : [item];
    };
  }
});

// node_modules/packages/lib/resolver/index.js
var require_resolver = __commonJS({
  "node_modules/packages/lib/resolver/index.js"(exports) {
    (function() {
      var resolverFactory, toarray;
      resolverFactory = require_factory2();
      toarray = require_toarray();
      exports.resolve = function(path) {
        var resolver;
        resolver = resolverFactory.create(path);
        if (!resolver) {
          throw new Error("unable to resolve '" + path + "'");
        }
        return toarray(resolver.resolve());
      };
    }).call(exports);
  }
});
export default require_resolver();
//# sourceMappingURL=packages_lib_resolver.js.map
